{"version":3,"sources":["assets/icons/contact.svg","assets/icons/home.svg","assets/icons/study.svg","components/App/index.js","components/App/App.js","components/Study/Study.js","components/Study/index.js","components/ContactMe/index.js","components/ContactMe/ContactMe.js","components/Drawer/index.js","components/Drawer/Drawer.js","components/Component/index.js","components/Component/Component.js","components/Home/index.js","components/Home/Home.js","components/Main/index.js","components/Main/Main.js","components/NotFound/index.js","components/NotFound/NotFound.js","components/Router/index.js","components/Router/Router.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","react_default","a","createElement","className","components_Router","Component","study","boxContent","url","Study","chapters","map","_ref","index","components_Component","key","content","ContactMe","Drawer","NavLink","to","src","HomeSVG","alt","StudySVG","ContactSVG","Link","concat","Home","Main","children","id","NotFound","Router","BrowserRouter","Fragment","components_Drawer","components_Main","Switch","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bcf058fe.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/contact.901dc299.svg\";","module.exports = __webpack_public_path__ + \"static/media/home.e0c7c3be.svg\";","module.exports = __webpack_public_path__ + \"static/media/study.38649ecd.svg\";","import App from './App'\r\n\r\nexport default App\r\n","import React, { Component } from 'react';\r\nimport { Router } from '../'\r\n\r\n\r\nexport default class App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Router />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react'\r\nimport { Component } from '..'\r\n\r\nconst study = [\r\n  {boxContent: \"Javascript\", url: \"/javascript\"},\r\n  {boxContent: \"React\", url: \"/react\"},\r\n  {boxContent: \"Sass\", url: \"/sass\"},\r\n  {boxContent: \"NodeJS\", url: \"/NodeJS\"},\r\n  {boxContent: \"GraphQL\", url: \"/graphQL\"},\r\n  {boxContent: \"Python\", url: \"/python\"}\r\n]\r\n\r\nconst Study = () => {\r\n  const chapters = study.map(({ boxContent, url }, index) =>\r\n    <Component key={boxContent} className={\"item item--\" + (index + 1)} content={boxContent} url={url} />)\r\n\r\n  return (\r\n    <div className=\"study\">\r\n      <div className=\"grid\">\r\n        <div className=\"grid-layout\">\r\n          {chapters}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n\r\nexport default Study\r\n","import Study from './Study'\r\n\r\nexport default Study\r\n","import ContactMe from './ContactMe'\r\n\r\nexport default ContactMe\r\n","import React from 'react'\r\n\r\nconst ContactMe = () => (\r\n  <div className=\"contact\">\r\n    Contact Me Component\r\n  </div>\r\n)\r\n\r\nexport default ContactMe\r\n","import Drawer from './Drawer'\r\n\r\nexport default Drawer\r\n","import React, { Component } from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { HomeSVG, StudySVG, ContactSVG } from '../../assets/icons'\r\n\r\nexport default class Drawer extends Component {\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"drawer\">\r\n        <nav className=\"nav-box\">\r\n          <ul className=\"list-items\">\r\n            <li className=\"list-item\">\r\n              <NavLink to=\"/\">\r\n                <img src={HomeSVG} alt=\"\" className=\"home-svg\"/>\r\n              </NavLink>\r\n            </li>\r\n            <li className=\"list-item\">\r\n              <NavLink to=\"/study\">\r\n                <img src={StudySVG} alt=\"\" className=\"study-svg\"/>\r\n              </NavLink>\r\n            </li>\r\n            <li className=\"list-item\">\r\n              <NavLink to=\"/contact\">\r\n                <img src={ContactSVG} alt=\"\" className=\"contact-svg\"/>\r\n              </NavLink>\r\n            </li>\r\n          </ul>\r\n        </nav>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import Component from './Component'\r\n\r\nexport default Component\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nconst Component = ({ className, content, url }) => {\r\n\r\n  return (\r\n    <div className={className}>\r\n      <div className=\"component-content\">\r\n        <Link to={`/study${url}`}>{content}</Link>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default Component\r\n","import Home from './Home'\r\n\r\nexport default Home\r\n","import React from 'react'\r\n\r\nconst Home = () => (\r\n  <div className=\"home\">\r\n    this is Home Yo  \r\n  </div>\r\n)\r\n\r\nexport default Home\r\n","import Main from './Main'\r\n\r\nexport default Main\r\n","import React from 'react'\r\n\r\nconst Main = ({ children }) => <main id=\"main\" className=\"main\">{ children }</main>\r\n\r\nexport default Main\r\n","import NotFound from './NotFound'\r\n\r\nexport default NotFound\r\n","import React from 'react'\r\n\r\nconst NotFound = () => (\r\n  <div className=\"not-found\">\r\n    4O4\r\n  </div>\r\n)\r\n\r\nexport default NotFound\r\n","import Router from './Router'\r\n\r\nexport default Router\r\n","import React from 'react'\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\r\nimport { Main, Drawer, Home, Study, ContactMe, NotFound } from '../'\r\n\r\nconst Router = () => (\r\n  <BrowserRouter>\r\n    <>\r\n      <Drawer />\r\n      <Main>\r\n        <Switch>\r\n          <Route exact path=\"/\" component={Home} />\r\n          <Route exact path=\"/study\" component={Study} />\r\n          <Route exact path=\"/contact\" component={ContactMe} />\r\n          <Route component={NotFound} />\r\n        </Switch>\r\n      </Main>\r\n    </>\r\n  </BrowserRouter>\r\n)\r\n\r\nexport default Router\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './components'\nimport './styles/index.css'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\nserviceWorker.unregister()\n"],"sourceRoot":""}